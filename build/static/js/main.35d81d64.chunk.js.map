{"version":3,"sources":["images/tpblogo.png","images/metamask.png","images/bnb-logo.png","images/logowhite.png","App.js","index.js"],"names":["App","web3","Web3","givenProvider","expectedBlockTime","sleep","milliseconds","Promise","resolve","setTimeout","tpbankABI","tpbank","abi","tpbankContract","eth","Contract","thepeoplestokenABI","thepeoplestoken","thepeoplestokenContract","useState","currentAccount","setCurrentAccount","connected","setConnected","balance","setBalance","bankBalance","setBankBalance","depositValue","setDepositValue","withdrawValue","setWithdrawValue","rewards","setRewards","available","setAvailable","isLoading","setLoading","isPending","setPending","connectWallet","window","ethereum","alert","request","method","accounts","methods","getWeiBalance","call","from","ethBalance","utils","fromWei","getBankBalance","ethBankBalance","String","balanceOf","then","bal","userThePeoplesTokenBalance","console","log","makeDeposit","amount","toWei","deposit","send","value","toString","gasLimit","error","transactonHash","transactionReceipt","getTransactionReceipt","makeWithdrawal","withdraw","claim","mintThePeoplesTokenToUser","Container","className","Row","Col","sm","span","Navbar","Brand","href","src","tpblogo","height","alt","offset","Button","id","style","width","onClick","metamask","slice","length","Card","type","color","timeout","text","Header","Title","Body","InputGroup","FormControl","placeholder","onChange","e","target","disabled","variant","Text","logo","size","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35d81d64.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tpblogo.00383518.png\";","export default __webpack_public_path__ + \"static/media/metamask.02e3ec27.png\";","export default __webpack_public_path__ + \"static/media/bnb-logo.92643887.png\";","export default __webpack_public_path__ + \"static/media/logowhite.4d773d42.png\";","import React, { useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Loader from \"react-loader-spinner\";\nimport Web3 from \"web3\";\nimport tpbank from \"./abis/TPBank.json\";\nimport thepeoplestoken from \"./abis/ThePeoplesToken.json\";\nimport tpblogo from \"./images/tpblogo.png\";\nimport metamask from \"./images/metamask.png\";\nimport eth from \"./images/bnb-logo.png\";\nimport logo from \"./images/logowhite.png\";\n// import logo from \"./images/logo.png\";\n\nconst App = () => {\n  const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n  const expectedBlockTime = 1000;\n  const sleep = (milliseconds) => {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n  };\n\n  const tpbankAddress = \"0x89cc38B7810955342E39c229397a9A6170911cBE\";\n  const tpbankABI = tpbank.abi;\n  const tpbankContract = new web3.eth.Contract(tpbankABI, tpbankAddress);\n\n  const thepeoplestokenAddress = \"0x4525fC549C2A4909a6C8992bbA30714Cf148CEED\";\n  const thepeoplestokenABI = thepeoplestoken.abi;\n  const thepeoplestokenContract = new web3.eth.Contract(\n    thepeoplestokenABI,\n    thepeoplestokenAddress\n  );\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [connected, setConnected] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const [bankBalance, setBankBalance] = useState(0);\n  const [depositValue, setDepositValue] = useState(\"\");\n  const [withdrawValue, setWithdrawValue] = useState(\"\");\n  const [rewards, setRewards] = useState(0);\n  const [available, setAvailable] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [isPending, setPending] = useState(false);\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"You need a MetaMask wallet to connect.\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n      setConnected(true);\n\n      const ethBalance = await tpbankContract.methods\n        .getWeiBalance()\n        .call({ from: accounts[0] });\n      setBalance(web3.utils.fromWei(ethBalance, \"ether\"));\n\n      const ethBankBalance = await tpbankContract.methods\n        .getBankBalance()\n        .call();\n      setBankBalance(web3.utils.fromWei(String(ethBankBalance), \"ether\"));\n\n      const userThePeoplesTokenBalance = await thepeoplestokenContract.methods\n        .balanceOf(accounts[0])\n        .call()\n        .then((bal) => bal);\n      setRewards(web3.utils.fromWei(userThePeoplesTokenBalance, \"ether\"));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const makeDeposit = async () => {\n    try {\n      let ethBalance;\n      let ethBankBalance;\n      const amount = web3.utils.toWei(depositValue, \"ether\");\n      await tpbankContract.methods\n        .deposit()\n        .send(\n          { from: currentAccount, value: amount.toString(), gasLimit: 300000 },\n          async function (error, transactonHash) {\n            console.log(\"Submitted transaction with hash: \", transactonHash);\n            let transactionReceipt = null;\n            while (transactionReceipt == null) {\n              // Waiting expectedBlockTime until the transaction is mined\n              transactionReceipt = await web3.eth.getTransactionReceipt(\n                transactonHash\n              );\n              setLoading(true);\n              await sleep(expectedBlockTime);\n            }\n            console.log(\"Transaction receipt: \", transactionReceipt);\n            ethBalance = await tpbankContract.methods\n              .getWeiBalance()\n              .call({ from: currentAccount });\n            ethBankBalance = await tpbankContract.methods\n              .getBankBalance()\n              .call();\n            setBalance(web3.utils.fromWei(ethBalance, \"ether\"));\n            setBankBalance(web3.utils.fromWei(String(ethBankBalance), \"ether\"));\n            setDepositValue(\"\");\n            setAvailable(true);\n            setLoading();\n          }\n        );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const makeWithdrawal = async () => {\n    try {\n      const amount = web3.utils.toWei(withdrawValue, \"ether\");\n      let ethBankBalance;\n      let bal = await tpbankContract.methods\n        .getWeiBalance()\n        .call({ from: currentAccount });\n\n      if (bal < amount) {\n        alert(\"insufficient funds\");\n        setWithdrawValue(\"\");\n      } else {\n        await tpbankContract.methods\n          .withdraw(amount)\n          .send({ from: currentAccount }, async function (\n            error,\n            transactonHash\n          ) {\n            console.log(\"Submitted transaction with hash: \", transactonHash);\n            let transactionReceipt = null;\n            while (transactionReceipt == null) {\n              // Waiting expectedBlockTime until the transaction is mined\n              transactionReceipt = await web3.eth.getTransactionReceipt(\n                transactonHash\n              );\n              setLoading(true);\n              await sleep(expectedBlockTime);\n            }\n            console.log(\"Transaction receipt: \", transactionReceipt);\n            bal = await tpbankContract.methods\n              .getWeiBalance()\n              .call({ from: currentAccount });\n            setBalance(web3.utils.fromWei(bal, \"ether\"));\n            ethBankBalance = await tpbankContract.methods\n              .getBankBalance()\n              .call();\n            setBankBalance(web3.utils.fromWei(String(ethBankBalance), \"ether\"));\n            setWithdrawValue(\"\");\n            setLoading();\n          });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const claim = async () => {\n    let userThePeoplesTokenBalance = await thepeoplestokenContract.methods\n      .balanceOf(currentAccount)\n      .call()\n      .then((bal) => bal);\n    userThePeoplesTokenBalance = web3.utils.fromWei(\n      userThePeoplesTokenBalance.toString(),\n      \"ether\"\n    );\n\n    await tpbankContract.methods\n      .mintThePeoplesTokenToUser(currentAccount)\n      .send({ from: currentAccount }, async function (error, transactonHash) {\n        console.log(\"Submitted transaction with hash: \", transactonHash);\n        let transactionReceipt = null;\n        while (transactionReceipt == null) {\n          // Waiting expectedBlockTime until the transaction is mined\n          transactionReceipt = await web3.eth.getTransactionReceipt(\n            transactonHash\n          );\n          setPending(true);\n          await sleep(expectedBlockTime);\n        }\n        console.log(\"Transaction receipt: \", transactionReceipt);\n        userThePeoplesTokenBalance = await thepeoplestokenContract.methods\n          .balanceOf(currentAccount)\n          .call()\n          .then((bal) => bal);\n        setRewards(web3.utils.fromWei(userThePeoplesTokenBalance, \"ether\"));\n        setPending();\n      });\n  };\n\n  return (\n    <Container className=\"p-3\">\n      <Container>\n        <Row className=\"align-items-sm-center mb-5\">\n          <Col sm={{ span: 6 }}>\n            <Navbar>\n              <Container>\n                <Navbar.Brand href=\"#home\">\n                  <img src={tpblogo} height=\"200\" alt=\"TPBank Logo\" />\n                </Navbar.Brand>\n              </Container>\n            </Navbar>\n          </Col>\n          <Col sm={{ span: 3, offset: 3 }}>\n          <img src={tpblogo} height=\"200\" alt=\"TPBank Logo\" />\n            <Button\n              id=\"connectBtn\"\n              style={{ width: \"14rem\" }}\n              onClick={connectWallet}\n            >\n              {\" \"}\n              <img src={metamask} height=\"27\" alt=\"Metamask Logo\" />\n              {currentAccount\n                ? ` ${currentAccount.slice(0, 6)}......${currentAccount.slice(\n                    currentAccount.length - 4,\n                    currentAccount.length\n                  )}`\n                : \"Connect Wallet\"}\n            </Button>\n            \n          </Col>\n          \n        </Row>\n        <Row className=\"justify-content-sm-center mb-3 text-center\">\n          <Col sm={{ span: 6 }}>\n            <span id=\"description\">\n              To make deposits and withdrawals, please connect your Metamask\n              Wallet to the BSC TestNet network. You will need some test BNB as\n              well. Try the official{\" \"}\n              <a href=\"https://testnet.binance.org/faucet-smart\">\n                BSC TestNet Faucet\n              </a>\n              .\n            </span>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-sm-center\">\n          <Col sm={12}>\n            {isLoading ? (\n              <Card\n                className=\"m-auto mb-3 text-center p-3\"\n                style={{ width: \"32rem\" }}\n              >\n                <Loader\n                  type=\"Oval\"\n                  color=\"#734b6d\"\n                  height={80}\n                  width={80}\n                  timeout={15000} //3 secs\n                />\n              </Card>\n            ) : (\n              <Card\n                className=\"m-auto mb-3 text-center p-3\"\n                style={{ width: \"32rem\" }}\n                text=\"light\"\n              >\n                <Card.Header>\n                  <Card.Title>Bank Balance</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  {bankBalance} BNB{\" \"}\n                  <img src={eth} height=\"32\" alt=\"Ether Logo\" />\n                </Card.Body>\n                <Card.Header>\n                  <Card.Title>Account Balance</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  {balance} BNB <img src={eth} height=\"32\" alt=\"Ether Logo\" />\n                </Card.Body>\n                <InputGroup className=\"mb-2 p-2\">\n                  <FormControl\n                    placeholder=\"Amount (BNB)\"\n                    aria-label=\"Amount (BNB)\"\n                    aria-describedby=\"basic-addon2\"\n                    value={depositValue}\n                    onChange={(e) => setDepositValue(e.target.value)}\n                  />\n                  <Button\n                    id=\"primary\"\n                    style={{ width: \"8rem\" }}\n                    onClick={makeDeposit}\n                    disabled={!connected}\n                  >\n                    Deposit\n                  </Button>\n                </InputGroup>\n                <InputGroup className=\"mb-2 p-2\">\n                  <FormControl\n                    placeholder=\"Amount (BNB)\"\n                    aria-label=\"Amount (BNB)\"\n                    aria-describedby=\"basic-addon2\"\n                    value={withdrawValue}\n                    onChange={(e) => setWithdrawValue(e.target.value)}\n                  />\n                  <Button\n                    variant=\"dark\"\n                    id=\"button-addon2\"\n                    style={{ width: \"8rem\" }}\n                    disabled={!(balance > 0)}\n                    onClick={makeWithdrawal}\n                  >\n                    Withdraw\n                  </Button>\n                </InputGroup>\n              </Card>\n            )}\n          </Col>\n        </Row>\n        <Row className=\"justify-content-sm-center\">\n          <Col sm={12}>\n            {isPending ? (\n              <Card\n                className=\"m-auto mb-2 text-center  p-3\"\n                style={{ width: \"32rem\" }}\n                text=\"light\"\n              >\n                <Loader\n                  type=\"Oval\"\n                  color=\"#734b6d\"\n                  height={80}\n                  width={80}\n                  timeout={18000} //3 secs\n                />\n              </Card>\n            ) : (\n              <Card\n                className=\"m-auto mb-3 text-center  p-3\"\n                style={{ width: \"32rem\" }}\n                text=\"light\"\n              >\n                <Card.Header>\n                  <Card.Title>Rewards</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  <Card.Text>\n                    {rewards} ThePeoplesToken{\" \"}\n                    <img src={logo} height=\"32\" alt=\"Logo\" />\n                  </Card.Text>\n                  <Button\n                    className=\"mb-3\"\n                    id=\"primary\"\n                    // id=\"button-addon2\"\n                    size=\"lg\"\n                    disabled={!available}\n                    onClick={claim}\n                  >\n                    {!available && rewards === 0\n                      ? \"Deposit to Earn Rewards\"\n                      : !available && rewards === \"1000\"\n                      ? \"Claimed\"\n                      : \"Claim Rewards\"}\n                  </Button>\n                </Card.Body>\n              </Card>\n            )}\n          </Col>\n        </Row>\n      </Container>\n      <div id=\"notice\">\n        <p>\n          To display $TPT in MetaMask open the extension and go to the Assets\n          tab. Select import token then copy and paste the TPT token address:\n        </p>\n        <p>0x4525fC549C2A4909a6C8992bbA30714Cf148CEED</p>\n      </div>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport './styles/App.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}